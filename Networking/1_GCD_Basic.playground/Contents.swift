import UIKit

// MARK:- Queue: Main, Global, Custom

// - Main
DispatchQueue.main.async {
    let view = UIView()
    view.backgroundColor = .darkGray
    // UIÏûëÏóÖ
}

// - Global
DispatchQueue.global(qos: .userInteractive).async {
    // Ï†úÏùº Ï§ëÏöîÌïú ÏûëÏóÖ
}
DispatchQueue.global(qos: .userInitiated).async {
    // Í±∞Ïùò Î∞îÎ°ú Ìï¥Ï§òÏïºÌï† ÏûëÏóÖ, ÏÇ¨Ïö©ÏûêÍ∞Ä Í≤∞Í≥ºÎ•º Í∏∞Îã§Î¶¨Îäî ÏûëÏóÖ
}
DispatchQueue.global(qos: .default).async {
    // Í±∞Ïùò ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÎäîÎã§
}
DispatchQueue.global(qos: .utility).async {
    // ÏãúÍ∞ÑÏù¥ Ï¢Ä Í±∏Î¶¨Îäî ÏùºÎì§, ÏÇ¨Ïö©ÏûêÍ∞Ä ÎãπÏû• Í∏∞Îã§Î¶¨ÏßÄ ÏïäÎäî Í≤É, ÎÑ§Ìä∏ÏõåÌÇπ, ÌÅ∞ ÌååÏùº Î∂àÎü¨Ïò¨ Îïå Îì±Îì±
}
DispatchQueue.global(qos: .background).async {
    // ÏÇ¨Ïö©ÏûêÌïúÌÖå ÎãπÏû• Ïù∏ÏãùÎê† ÌïÑÏöîÍ∞Ä ÏóÜÎäî Í≤ÉÎì§, Îâ¥Ïä§Îç∞Ïù¥ÌÑ∞ ÎØ∏Î¶¨ Î∞õÍ∏∞, ÏúÑÏπò ÏóÖÎç∞Ïù¥Ìä∏, ÏòÅÏÉÅ Îã§Ïö¥ Î∞õÍ∏∞ Îì±
}

// - Custom
let concurrentQueue = DispatchQueue(label: "concurrent", qos: .background, attributes: .concurrent)
let serialQueue = DispatchQueue(label: "serial", qos: .background)
// ÏÇ¨Ïö©ÏûêÍ∞Ä ÏßÅÏ†ë ÎîîÏä§Ìå®ÏπòÌÅêÎ•º ÎßåÎì§Ïñ¥ ÏÇ¨Ïö©Ìï† Ïàò ÏûàÎã§.


// MARK:- Î≥µÌï©Ï†ÅÏù∏ ÏÉÅÌô©

func downloadImageFromServer() -> UIImage {
    // Heavy Task
    
    return UIImage()
}
func updateUI(image: UIImage) {
    
}

DispatchQueue.global(qos: .background).async {
    // download
    let image = downloadImageFromServer()
    
    DispatchQueue.main.async {
        // update ui
        updateUI(image: image)
    }
}

// MARK:- Sync, Async

// Async

DispatchQueue.global(qos: .background).async {
    for i in 0...5 {
        print("üòà \(i)")
    }
}

DispatchQueue.global(qos: .userInteractive).async {
    for i in 0...5 {
        print("‚ò∫Ô∏è \(i)")
    }
}

// Sync

DispatchQueue.global(qos: .background).sync {
    for i in 0...5 {
        print("üòà \(i)")
    }
}

DispatchQueue.global(qos: .userInteractive).async {
    for i in 0...5 {
        print("‚ò∫Ô∏è \(i)")
    }
}
